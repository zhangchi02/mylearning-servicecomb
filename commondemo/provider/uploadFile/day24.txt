Collection的遍历：（foreach循环、迭代器）

迭代器注意点：

1、不能直接修改集合中元素

2、如果想改，必须先删掉，再修改保存的中间变量，最后将中间变量添加到集合中

----------------------------------------------------------------------------------------------------

一、HashSet

1、使用Hash算法来存储数据（底层是个数组，数组中是个链表--了解即可）

2、HashSet()：构造一个新的空set，其底层数组默认初始容量是16，加载因子是0.75。
   HashSet(int initialCapacity, float loadFactor) 
          构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和指定的加载因子。
   1）initialCapacity：代表底层数组初始的容量，为2的整数次方。
   2）loadFactor：加载因子（0到1之间的float值）：默认为0.75，当储存的元素个数达到该比例时，进行“rehash（重哈希）”，
            本质就是创建一个新数组，把老数组中的元素复制到新数组中，原来的老数组变成垃圾等待回收。

3、HashSet的储存机制：
   1）当向HashSet中添加元素时：
      A、计算出hashCode的值（相当于数组中的索引）
      B、看数组索引处是否有元素，如果没有，直接放入
      C、如果要放入的索引处有元素，则调用equals方法判断是否为同一个元素
      D、如果equals方法判断是“同一个”元素，则不放入。如果不同，则形成链表。
   2）取出元素：
      A、计算出hashCode的值（相当于数组中的索引）
      B、如果只有一个元素，则直接取出
      C、如果有链表，则挨个搜索，使用equals判断，直到找到需要的元素为止。

4、HashSet如何判断两个对象相等
   hashCode() && equals()

5、LinkedHashSet：HashSet的子类，额外维护了一个链表，用于记录元素放入的顺序。


二、TreeSet

1、TreeSet集合内部使用排序二叉树来存放和管理数据。

2、特点：
   1）TreeSet要求集合元素必须可以比较大小（要么自身可排序，要么TreeSet可以对元素排序）。
   2）TreeSet不会像HashSet一样有内存的“浪费”。

3、比较大小的方式：
   1）方法一：要存入集合的对象实现Compareable接口，自身是可排序的。
   2）方法二：创建TreeSet时，传入一个Comparator接口实现类的实例，使用该“比较器”对存入集合的元素进行排序。

4、TreeSet如何判断两个对象相等
   只要两个对象通过compare或compareTo方法返回0，则认为是相同的。

